% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ab_scenario.R
\name{ab_scenario}
\alias{ab_scenario}
\title{Generate A/B Street Scenario objects by disaggregating aggregate OD data}
\usage{
ab_scenario(
  od,
  zones,
  buildings = NULL,
  scenario_name,
  time_fun = ab_time_normal,
  output = "sf",
  modes = c("Walk", "Bike", "Drive", "Transit"),
  ...
)
}
\arguments{
\item{od}{Origin destination data with the first 2 columns containing
zone code of origin and zone code of destination. Subsequent
columns should be mode names such as All and Walk, Bike, Transit, Drive,
representing the number of trips made by each mode of transport
for use in A/B Street.}

\item{zones}{Pologons containing an id column that match the \code{od} data. Class: \code{sf}.}

\item{buildings}{Polygons where trips will originate or end (\code{sf} object)}

\item{scenario_name}{Character describing the scenario being created.}

\item{time_fun}{The function used to calculate departure times.
\code{ab_time_normal()} by default.}

\item{output}{Which output format?
\code{"sf"} (default) and \code{"json_list"} return R objects.
\code{"json_file"} will save a .json file for the scenario based on the \code{scenario_name}.}

\item{modes}{The modes of travel to include,
\code{c("Walk", "Bike", "Drive", "Transit")} by default.}

\item{...}{Additional arguments to pass to \code{\link[=ab_json]{ab_json()}}}
}
\description{
This function takes a data frame representing origin-destination trip data
in 'long' form, zones and, optionally, buildings from where trips can
start and end as inputs.
}
\details{
It returns an \code{sf} object by default representing individual trips
between randomly selected points (or buildings when available)
between the zones represented in the OD data.
}
\examples{
od = leeds_od
zones = leeds_zones
od[[1]] = c("E02006876")
ablines = ab_scenario(od, zones = zones)
plot(ablines)
table(ablines$mode)
colSums(od[3:7]) # 0.17 vs 0.05 for ab_scenario
ablines = ab_scenario(od, zones = zones, origin_buildings = leeds_buildings)
plot(leeds_zones$geometry)
plot(leeds_buildings$geometry, add = TRUE)
plot(ablines["mode"], add = TRUE)
ablines_json = ab_json(ablines, scenario_name = "test")
# ablines = ab_scenario(
#   leeds_houses,
#   leeds_buildings,
#   leeds_desire_lines,
#   leeds_zones,
#   output = "sf"
# )
# plot(ablines, key.pos = 1, reset = FALSE)
# plot(leeds_site_area$geometry, add = TRUE)
# plot(leeds_buildings$geometry, add = TRUE)
# plot(dutch, key.pos = 1, reset = FALSE)
}

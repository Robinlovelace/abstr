% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ab_scenario.R
\name{ab_scenario}
\alias{ab_scenario}
\title{Generate A/B Street Scenario files/objects}
\usage{
ab_scenario(
  houses,
  buildings,
  desire_lines,
  zones,
  scenario = "base",
  time_fun = ab_time_normal,
  output_format = "sf",
  op = sf::st_intersects,
  ...
)
}
\arguments{
\item{houses}{Polygons where trips will originate (`sf` object)}

\item{buildings}{Buildings where trips will end represented as `sf` object}

\item{desire_lines}{Origin-Destination data represented as `sf`
objects with `LINESTRING` geometries with 2 vertices, start point and
end point.}

\item{zones}{Zones with IDs that match the desire lines and class `sf`}

\item{scenario}{The name of the scenario, used to match column names.
`"base"` by default.}

\item{time_fun}{The function used to calculate departure times.
`ab_time_normal()` by default.}

\item{output_format}{Which output format? `"sf"` (default) or `"json_list"`?}

\item{op}{The binary predicate used to assign `buildings` to `zones`.
See online documentation on binary predicates for further details, e.g.
[Spatial Data Science](https://keen-swartz-3146c4.netlify.app/geommanip.html)}

\item{...}{Additional arguments to pass to `time_fun`}
}
\description{
Generate A/B Street Scenario files/objects
}
\examples{
ablines = ab_scenario(
  leeds_houses,
  leeds_buildings,
  leeds_desire_lines,
  leeds_zones,
  output_format = "sf"
)
ablines_dutch = ab_scenario(
  leeds_houses,
  leeds_buildings,
  leeds_desire_lines,
  leeds_zones,
  scenario = "dutch",
  output_format = "sf"
)
plot(ablines, key.pos = 1, reset = FALSE)
plot(leeds_site_area$geometry, add = TRUE)
plot(leeds_buildings$geometry, add = TRUE)
plot(ablines_dutch, key.pos = 1, reset = FALSE)
plot(leeds_site_area$geometry, add = TRUE)
plot(leeds_buildings$geometry, add = TRUE)
ab_evening_dutch = ab_scenario(
  leeds_houses,
  leeds_buildings,
  leeds_desire_lines,
  leeds_zones,
  scenario = "dutch",
  output_format = "json_list",
  hr = 20, # representing 8 pm
  sd = 0
)
f = tempfile(fileext = ".json")
ab_save(ab_evening_dutch, f)
readLines(f)[13]
20 * 60^2
}
